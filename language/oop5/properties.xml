<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 9ee9eccf455188ab6eb352194eb6f9eb99e15606 Maintainer: ae Status: ready --><!-- CREDITS: fabioluciano,ae -->
 <sect1 xml:id="language.oop5.properties" xmlns="http://docbook.org/ns/docbook">
  <title>Propriedades</title>

  <para>
   Variáveis membros de classes são chamados de <emphasis>propriedades</emphasis>.
   Eles também são conhecidos por outros termos, como <emphasis>campos</emphasis> (field),
   mas para propósitos deste manual será utilizado <emphasis>propriedade</emphasis>.
   As propriedades podem ser definidas utilizando-se as palavras chave
   <literal>public</literal>, <literal>protected</literal> ou
   <literal>private</literal>, e opcionalmente a partir do PHP 7.4,
   seguido também de uma declaração de tipo, finalizando com um nome de variável comum.
   Essa declaração pode ainda incluir uma inicialização, desde que essa inicialização
   seja um valor <link linkend="language.constants">constante</link>.
  </para>
  <para>
   Veja <xref linkend="language.oop5.visibility" /> para mais
   informações sobre o significado
   de <literal>public</literal>, <literal>protected</literal>
   e <literal>private</literal>.
  </para>
  <note>
   <para>
    Uma forma alternativa e NÃO recomendada de declarar propriedades de classe, existente por conta de compatibilidade
    retroativa com o PHP, é atraǘes da palavra chave
    <literal>var</literal>.
    Isso declará uma propriedade com as mesmas características de uma
    propriedade <literal>public</literal>.
   </para>
  </note>
  <para>
   Internamente às classes, métodos não estáticos podem ser acessados utilizando-se
   <literal>-&gt;</literal> (operador de objeto): <varname>$this-&gt;property</varname>
   (onde <literal>property</literal> é o nome da propriedade).
   Propriedades estáticas são acessadas utilizando-se o operador <literal>::</literal> (duplo dois pontos), assim:
   <varname>self::$property</varname>. Veja sobre <link linkend="language.oop5.static">palavra chave static</link>
   para mais informações sobre a diferença de propriedades estáticas e não estáticas.
  </para>
  <para>
   A pseudo-variável <varname>$this</varname> está disponível dentro
   de qualquer classe de método chamada no contexto do objeto.
   <varname>$this</varname> é uma referência ao objeto de contexto do qual o método foi chamado.
  </para>

  <para>
   <example>
    <title>Declaração de propriedades</title>
    <programlisting role="php">
<![CDATA[
<?php
class SimpleClass
{
   public $var1 = 'Olá ' . 'mundo';
   public $var2 = <<<EOD
Olá mundo
EOD;
   public $var3 = 1+2;
   // Declaração de propriedade inválida
   public $var4 = self::myStaticMethod();
   public $var5 = $myVar;

   // Declaração de propriedade válida
   public $var6 = myConstant;
   public $var7 = [true, false];

   public $var8 = <<<'EOD'
Olá mundo
EOD;
}
?>
]]>
    </programlisting>   
   </example>
  </para>

  <note>
   <para>
    Existem várias funções para manipular classes e objetos.
    Veja a seção sobre <link linkend="ref.classobj">funções sobre classes/objetos</link>
    para mais detalhes.
   </para>
  </note>

  <sect2 xml:id="language.oop5.properties.typed-properties">
   <title>Declaração de propriedades tipadas</title>
   <para>
    A partir do PHP 7.4.0, definições de propriedades podem incluir uma
    <xref linkend="language.types.declarations" />,
    com exceção do tipo <type>callable</type>.
    <example>
     <title>Exemplo de propriedades tipadas</title>
     <programlisting role="php">
<![CDATA[
<?php

class User
{
    public int $id;
    public ?string $name;

    public function __construct(int $id, ?string $name)
    {
        $this->id = $id;
        $this->name = $name;
    }
}

$user = new User(1234, null);

var_dump($user->id);
var_dump($user->name);

?>
]]>
     </programlisting>
     &example.outputs;
     <screen>
<![CDATA[
int(1234)
NULL
]]>
     </screen>
    </example>
   </para>

   <para>
    Propriedades tipadas precisam ser inicializadas antes de serem acessadas, senão um
    <classname>Error</classname> é lançado.
    <example>
     <title>Acessando propriedades</title>
     <programlisting role="php">
<![CDATA[
<?php

class Forma
{
    public int $numeroDeLados;
    public string $nome;

    public function setnumeroDeLados(int $numeroDeLados): void
    {
        $this->numeroDeLados = $numeroDeLados;
    }

    public function setNome(string $nome): void
    {
        $this->nome = $nome;
    }

    public function getnumeroDeLados(): int
    {
        return $this->numeroDeLados;
    }

    public function getNome(): string
    {
        return $this->nome;
    }
}

$triangle = new Forma();
$triangle->setNome("triângulo");
$triangle->setnumeroDeLados(3);
var_dump($triangle->getNome());
var_dump($triangle->getnumeroDeLados());

$circle = new Forma();
$circle->setNome("cículo");
var_dump($circle->getNome());
var_dump($circle->getnumeroDeLados());
?>
]]>
     </programlisting>
     &example.outputs;
     <screen>
<![CDATA[
string(9) "triângulo"
int(3)
string(7) "círculo"

Fatal error: Uncaught Error: Typed property Forma::$numeroDeLados must not be accessed before initialization
]]>
     </screen>
    </example>
   </para>
  </sect2>

 </sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
